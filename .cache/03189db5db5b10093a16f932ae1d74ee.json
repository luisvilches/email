{"dependencies":[{"name":"/Users/luisvilches/proyectos/framework_email/node_modules/main/package.json","includedInParent":true,"mtime":1531113496000},{"name":"/Users/luisvilches/proyectos/framework_email/package.json","includedInParent":true,"mtime":1531113496000},{"name":"fs","loc":{"line":3,"column":17},"parent":"/Users/luisvilches/proyectos/framework_email/node_modules/main/optparser.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"util","loc":{"line":4,"column":19},"parent":"/Users/luisvilches/proyectos/framework_email/node_modules/main/optparser.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/util/util.js"},{"name":"minimist","loc":{"line":5,"column":22},"parent":"/Users/luisvilches/proyectos/framework_email/node_modules/main/optparser.js","resolved":"/Users/luisvilches/proyectos/framework_email/node_modules/minimist/index.js"},{"name":"process","parent":"/Users/luisvilches/proyectos/framework_email/node_modules/main/optparser.js","resolved":"/usr/local/lib/node_modules/parcel-bundler/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\n\nvar fs = require('fs')\n, extend = require('util')._extend\n, parseArgs = require('minimist');\n\n/*\nGiven a title, depth, and markdown, return the sections that the query matches.\n*/\nvar getSections = exports.getSections = function(title, level, markdown) {\n\n\t// What parts do we consider the start of a hash section?\n\tvar hashes = new Array(level+1).join('#')\n\t, hashExp = new RegExp('^' + hashes + '[^#]*$')\n\t, hashTitleExp = new RegExp('^' + hashes + '[^#]*' + title +'\\\\s*$')\n\t, dashExp;\n\n\tif (level === 1) { dashExp = /^==+$/; }\n\telse if (level === 2) { dashExp = /^--+$/; }\n\n\tvar parsed = markdown.split('\\n').reduce(function(result, line) {\n\n\t\tvar hasHash = hashExp.test(line)\n\t\t, hasHashTitle = hashTitleExp.test(line)\n\t\t, hasHashTitlePrev = hashTitleExp.test(result.previous)\n\t\t, hasDash = dashExp && dashExp.test(line)\n\t\t, hasDashTitle = dashExp && dashExp.test(line) &&\n\t\t\tresult.previous.indexOf(title) !== -1;\n\n\t\t// If we haven't added anything to the current section, look for a line\n\t\t// that marks the beginning\n\t\tif (result.currentSection.length === 0) {\n\t\t\tif (hasHashTitle) {\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t} else if (hasHashTitlePrev || hasDashTitle) {\n\t\t\t\tresult.currentSection.push(result.previous);\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t}\n\t\t}\n\t\t// Process current section - we have a beginning\n\t\telse {\n\t\t\t// Check if we are at the end of this section (hash)\n\t\t\tif (hasHash) {\n\t\t\t\tresult.sections.push(result.currentSection.join('\\n'));\n\t\t\t\tresult.currentSection = [];\n\t\t\t}\n\t\t\t// End of section? (dash)\n\t\t\telse if (hasDash) {\n\t\t\t\tline = result.currentSection.pop() + '\\n' + line;\n\t\t\t\tresult.sections.push(result.currentSection.join('\\n'));\n\t\t\t\tresult.currentSection = [];\n\t\t\t}\n\t\t\t// Not ending, continue adding lines to current section\n\t\t\telse {\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t}\n\t\t}\n\n\t\tresult.previous = line;\n\t\treturn result;\n\t}, {\n\t\tcurrentSection: [], // The current section lines\n\t\tprevious: undefined, // The previous row's value\n\t\tsections: [] // The final result\n\t});\n\n\t// kick any lingering current sections into the results\n\tif (parsed.currentSection.length > 0) {\n\t\tparsed.sections.push(parsed.currentSection.join('\\n'));\n\t}\n\n\treturn parsed.sections;\n};\n\n\n/*\nGiven a single flag section from markdown, return back information about it.\n*/\nvar parseFlagSection = exports.parseFlagSection = function(section) {\n\n\tvar groups = /(?:#{3,}\\s*)(.+?)(?:\\((.*)\\)|$)/gm.exec(section)\n\t, flags = groups[1]\n\t, parens = groups[2];\n\n\tvar parsedFlags = flags.split(',').map(function(flag) {\n\t\treturn flag\n\t\t\t.replace(/--?/, '') // remove dashes\n\t\t\t.replace(/=/, ' ') // replace any '=' with ' '\n\t\t\t.trim().replace(/  +/, ' '); // remove excess space\n\t}).map(function(flag) {\n\t\tvar parts = flag.split(' ');\n\t\treturn { name: parts[0], placeholder: parts[1] };\n\t});\n\n\tvar result = {}\n\t, name = parsedFlags[0].name;\n\n\tresult[name] = {};\n\n\tvar aliasName = parsedFlags[1] && parsedFlags[1].name;\n\tif (aliasName) {\n\t\tresult[name].alias = aliasName;\n\t}\n\n\tvar placeholders = parsedFlags\n\t\t.map(function(flag) { return flag.placeholder; })\n\t\t.filter(function(placeholder) {\n\t\t\treturn typeof placeholder !== 'undefined';\n\t\t})\n\t, hasPlaceholders = placeholders.length > 0;\n\n\t// no placeholders? it's a boolean flag\n\tif (!hasPlaceholders) {\n\t\tresult[name].type = 'boolean';\n\t}\n\t// check to see if quotes are used to force it to be a string\n\telse if (/'|\"/.test(placeholders.join(''))) {\n\t\tresult[name].type = 'string';\n\t}\n\n\tif (/required/.test(parens)) {\n\t\tresult[name].required = true;\n\t}\n\n\tvar defaultGroup = /default=([\\w\\$]+)/gm.exec(parens);\n\tif (defaultGroup && defaultGroup[1]) {\n\t\tvar isEnvVar = defaultGroup[1].substring(0, 1) === '$';\n\t\tif (isEnvVar) {\n\t\t\tvar envVar = defaultGroup[1].replace('$', '');\n\t\t\tif (typeof process.env[envVar] !== 'undefined') {\n\t\t\t\tresult[name].default = process.env[envVar];\n\t\t\t}\n\t\t} else {\n\t\t\tresult[name].default = defaultGroup[1];\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/*\nBuilds the attributes object that minimist expects to receive based on our\noption configuration that we pass in. It basically bunches it all together.\n*/\nvar getAttributes = exports.getAttributes = function(optionConfig) {\n\n\tvar attributes = {\n\t\tstring: [],\n\t\tboolean: [],\n\t\talias: {},\n\t\tdefault: {}\n\t};\n\n\tvar optionName, option;\n\n\tfor (optionName in optionConfig) {\n\n\t\toption = optionConfig[optionName];\n\n\t\t// load in types for this flag\n\t\tif (option.type) {\n\t\t\ttry { attributes[option.type].push(optionName); }\n\t\t\tcatch (error) {\n\t\t\t\tthrow new Error('invalid type ' + option.type);\n\t\t\t}\n\t\t}\n\n\t\t// load in any alias for this option\n\t\tif (option.alias) {\n\t\t\tattributes.alias[option.alias] = optionName;\n\t\t}\n\n\t\t// load in any default values for this option\n\t\tif (option.default) {\n\t\t\tattributes.default[optionName] = option.default;\n\t\t}\n\t}\n\n\treturn attributes;\n};\n\nvar handleOptions = exports.handleOptions = function(argv, optionConfig) {\n\n\tvar attributes = getAttributes(optionConfig)\n\t, parsed = parseArgs(argv || [], attributes);\n\n\t// check for any required options that are missing\n\tfor (var optionName in optionConfig) {\n\t\tvar isRequired = optionConfig[optionName].required;\n\n\t\tif (isRequired && !parsed[optionName]) {\n\t\t\tthrow new Error('Missing required option ' + optionName);\n\t\t}\n\t}\n\n\treturn parsed;\n};\n\nvar parseOptions = exports.parseOptions = function(markdown) {\n\tif (!markdown) { return {}; }\n\n\tvar optionMarkdown = getSections('OPTIONS', 2, markdown)[0];\n\n\tif (!optionMarkdown) { return {}; }\n\n\tvar flagMarkdownSections = getSections('-.*', 3, optionMarkdown);\n\n\treturn flagMarkdownSections.reduce(function(value, current) {\n\t\treturn extend(value, parseFlagSection(current));\n\t}, {});\n};\n\nvar parse = exports.parse = function(argv, markdown) {\n\tvar self = {};\n\n\tself.options = handleOptions(argv, parseOptions(markdown));\n\n\t// Retrieves the value of a positional argument or a flag based on if a\n\t// number or a string is provided.\n\tself.getValue = function(positionOrFlag) {\n\t\tif (typeof positionOrFlag === 'string') {\n\t\t\treturn self.options[positionOrFlag];\n\t\t}\n\t\tif (typeof positionOrFlag === 'number') {\n\t\t\treturn self.options._[positionOrFlag];\n\t\t}\n\t\tthrow new Error('provide a position (number) or a flag (string)');\n\t};\n\n\treturn self;\n};\n","map":{"mappings":[{"source":"node_modules/main/optparser.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/main/optparser.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}}],"sources":{"node_modules/main/optparser.js":"\"use strict\";\n\nvar fs = require('fs')\n, extend = require('util')._extend\n, parseArgs = require('minimist');\n\n/*\nGiven a title, depth, and markdown, return the sections that the query matches.\n*/\nvar getSections = exports.getSections = function(title, level, markdown) {\n\n\t// What parts do we consider the start of a hash section?\n\tvar hashes = new Array(level+1).join('#')\n\t, hashExp = new RegExp('^' + hashes + '[^#]*$')\n\t, hashTitleExp = new RegExp('^' + hashes + '[^#]*' + title +'\\\\s*$')\n\t, dashExp;\n\n\tif (level === 1) { dashExp = /^==+$/; }\n\telse if (level === 2) { dashExp = /^--+$/; }\n\n\tvar parsed = markdown.split('\\n').reduce(function(result, line) {\n\n\t\tvar hasHash = hashExp.test(line)\n\t\t, hasHashTitle = hashTitleExp.test(line)\n\t\t, hasHashTitlePrev = hashTitleExp.test(result.previous)\n\t\t, hasDash = dashExp && dashExp.test(line)\n\t\t, hasDashTitle = dashExp && dashExp.test(line) &&\n\t\t\tresult.previous.indexOf(title) !== -1;\n\n\t\t// If we haven't added anything to the current section, look for a line\n\t\t// that marks the beginning\n\t\tif (result.currentSection.length === 0) {\n\t\t\tif (hasHashTitle) {\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t} else if (hasHashTitlePrev || hasDashTitle) {\n\t\t\t\tresult.currentSection.push(result.previous);\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t}\n\t\t}\n\t\t// Process current section - we have a beginning\n\t\telse {\n\t\t\t// Check if we are at the end of this section (hash)\n\t\t\tif (hasHash) {\n\t\t\t\tresult.sections.push(result.currentSection.join('\\n'));\n\t\t\t\tresult.currentSection = [];\n\t\t\t}\n\t\t\t// End of section? (dash)\n\t\t\telse if (hasDash) {\n\t\t\t\tline = result.currentSection.pop() + '\\n' + line;\n\t\t\t\tresult.sections.push(result.currentSection.join('\\n'));\n\t\t\t\tresult.currentSection = [];\n\t\t\t}\n\t\t\t// Not ending, continue adding lines to current section\n\t\t\telse {\n\t\t\t\tresult.currentSection.push(line);\n\t\t\t}\n\t\t}\n\n\t\tresult.previous = line;\n\t\treturn result;\n\t}, {\n\t\tcurrentSection: [], // The current section lines\n\t\tprevious: undefined, // The previous row's value\n\t\tsections: [] // The final result\n\t});\n\n\t// kick any lingering current sections into the results\n\tif (parsed.currentSection.length > 0) {\n\t\tparsed.sections.push(parsed.currentSection.join('\\n'));\n\t}\n\n\treturn parsed.sections;\n};\n\n\n/*\nGiven a single flag section from markdown, return back information about it.\n*/\nvar parseFlagSection = exports.parseFlagSection = function(section) {\n\n\tvar groups = /(?:#{3,}\\s*)(.+?)(?:\\((.*)\\)|$)/gm.exec(section)\n\t, flags = groups[1]\n\t, parens = groups[2];\n\n\tvar parsedFlags = flags.split(',').map(function(flag) {\n\t\treturn flag\n\t\t\t.replace(/--?/, '') // remove dashes\n\t\t\t.replace(/=/, ' ') // replace any '=' with ' '\n\t\t\t.trim().replace(/  +/, ' '); // remove excess space\n\t}).map(function(flag) {\n\t\tvar parts = flag.split(' ');\n\t\treturn { name: parts[0], placeholder: parts[1] };\n\t});\n\n\tvar result = {}\n\t, name = parsedFlags[0].name;\n\n\tresult[name] = {};\n\n\tvar aliasName = parsedFlags[1] && parsedFlags[1].name;\n\tif (aliasName) {\n\t\tresult[name].alias = aliasName;\n\t}\n\n\tvar placeholders = parsedFlags\n\t\t.map(function(flag) { return flag.placeholder; })\n\t\t.filter(function(placeholder) {\n\t\t\treturn typeof placeholder !== 'undefined';\n\t\t})\n\t, hasPlaceholders = placeholders.length > 0;\n\n\t// no placeholders? it's a boolean flag\n\tif (!hasPlaceholders) {\n\t\tresult[name].type = 'boolean';\n\t}\n\t// check to see if quotes are used to force it to be a string\n\telse if (/'|\"/.test(placeholders.join(''))) {\n\t\tresult[name].type = 'string';\n\t}\n\n\tif (/required/.test(parens)) {\n\t\tresult[name].required = true;\n\t}\n\n\tvar defaultGroup = /default=([\\w\\$]+)/gm.exec(parens);\n\tif (defaultGroup && defaultGroup[1]) {\n\t\tvar isEnvVar = defaultGroup[1].substring(0, 1) === '$';\n\t\tif (isEnvVar) {\n\t\t\tvar envVar = defaultGroup[1].replace('$', '');\n\t\t\tif (typeof process.env[envVar] !== 'undefined') {\n\t\t\t\tresult[name].default = process.env[envVar];\n\t\t\t}\n\t\t} else {\n\t\t\tresult[name].default = defaultGroup[1];\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/*\nBuilds the attributes object that minimist expects to receive based on our\noption configuration that we pass in. It basically bunches it all together.\n*/\nvar getAttributes = exports.getAttributes = function(optionConfig) {\n\n\tvar attributes = {\n\t\tstring: [],\n\t\tboolean: [],\n\t\talias: {},\n\t\tdefault: {}\n\t};\n\n\tvar optionName, option;\n\n\tfor (optionName in optionConfig) {\n\n\t\toption = optionConfig[optionName];\n\n\t\t// load in types for this flag\n\t\tif (option.type) {\n\t\t\ttry { attributes[option.type].push(optionName); }\n\t\t\tcatch (error) {\n\t\t\t\tthrow new Error('invalid type ' + option.type);\n\t\t\t}\n\t\t}\n\n\t\t// load in any alias for this option\n\t\tif (option.alias) {\n\t\t\tattributes.alias[option.alias] = optionName;\n\t\t}\n\n\t\t// load in any default values for this option\n\t\tif (option.default) {\n\t\t\tattributes.default[optionName] = option.default;\n\t\t}\n\t}\n\n\treturn attributes;\n};\n\nvar handleOptions = exports.handleOptions = function(argv, optionConfig) {\n\n\tvar attributes = getAttributes(optionConfig)\n\t, parsed = parseArgs(argv || [], attributes);\n\n\t// check for any required options that are missing\n\tfor (var optionName in optionConfig) {\n\t\tvar isRequired = optionConfig[optionName].required;\n\n\t\tif (isRequired && !parsed[optionName]) {\n\t\t\tthrow new Error('Missing required option ' + optionName);\n\t\t}\n\t}\n\n\treturn parsed;\n};\n\nvar parseOptions = exports.parseOptions = function(markdown) {\n\tif (!markdown) { return {}; }\n\n\tvar optionMarkdown = getSections('OPTIONS', 2, markdown)[0];\n\n\tif (!optionMarkdown) { return {}; }\n\n\tvar flagMarkdownSections = getSections('-.*', 3, optionMarkdown);\n\n\treturn flagMarkdownSections.reduce(function(value, current) {\n\t\treturn extend(value, parseFlagSection(current));\n\t}, {});\n};\n\nvar parse = exports.parse = function(argv, markdown) {\n\tvar self = {};\n\n\tself.options = handleOptions(argv, parseOptions(markdown));\n\n\t// Retrieves the value of a positional argument or a flag based on if a\n\t// number or a string is provided.\n\tself.getValue = function(positionOrFlag) {\n\t\tif (typeof positionOrFlag === 'string') {\n\t\t\treturn self.options[positionOrFlag];\n\t\t}\n\t\tif (typeof positionOrFlag === 'number') {\n\t\t\treturn self.options._[positionOrFlag];\n\t\t}\n\t\tthrow new Error('provide a position (number) or a flag (string)');\n\t};\n\n\treturn self;\n};\n"},"lineCount":233}},"hash":"613610c3c3649e6619031986047c764f","cacheData":{"env":{}},"id":12}